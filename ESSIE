cd services/essie

cat > package.json << 'EOF'
{
  "name": "@vbos/essie",
  "version": "0.1.0",
  "description": "ESSIE - Health Practitioner Licensing & Identity Service",
  "main": "dist/index.js",
  "scripts": {
    "build": "tsc",
    "dev": "ts-node-dev --respawn src/server.ts",
    "start": "node dist/server.js",
    "test": "jest",
    "lint": "eslint src/**/*.ts",
    "type-check": "tsc --noEmit"
  },
  "dependencies": {
    "express": "^4.18.0",
    "cors": "^2.8.5",
    "helmet": "^7.0.0",
    "morgan": "^1.10.0",
    "winston": "^3.8.0",
    "uuid": "^9.0.0",
    "joi": "^17.9.0",
    "@vbos/identity": "workspace:*"
  },
  "devDependencies": {
    "@types/express": "^4.17.0",
    "@types/cors": "^2.8.0",
    "@types/morgan": "^1.9.0",
    "@types/uuid": "^9.0.0",
    "@types/node": "^20.0.0",
    "typescript": "^5.0.0",
    "ts-node-dev": "^2.0.0"
  }
}
EOF

cat > tsconfig.json << 'EOF'
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "rootDir": "./src"
  },
  "include": ["src/**/*"],
  "exclude": ["dist", "node_modules"]
}
EOF

mkdir -p src

# Create server file
cat > src/server.ts << 'EOF'
import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import { ESSIEService } from './essie-service';
import { VBOSIdentityManager } from '@vbos/identity';

const app = express();
const port = process.env.PORT || 3001;

// Middleware
app.use(helmet());
app.use(cors());
app.use(morgan('combined'));
app.use(express.json());

// Initialize services
const identityManager = new VBOSIdentityManager();
const essieService = new ESSIEService(identityManager);

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'healthy', 
    service: 'ESSIE',
    timestamp: new Date().toISOString(),
    version: '0.1.0'
  });
});

// Practitioner registration
app.post('/api/practitioners/register', async (req, res) => {
  try {
    const { personalInfo, credentials } = req.body;
    const practitioner = await essieService.registerPractitioner(personalInfo, credentials);
    res.status(201).json(practitioner);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// License validation
app.get('/api/licenses/:licenseId/validate', async (req, res) => {
  try {
    const { licenseId } = req.params;
    const validation = await essieService.validateLicense(licenseId);
    res.json(validation);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

app.listen(port, () => {
  console.log(`🏥 ESSIE Service running on port ${port}`);
  console.log(`🌱 Health check: http://localhost:${port}/health`);
});
EOF

cd ../..