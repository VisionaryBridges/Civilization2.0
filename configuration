# Create package.json
cat > package.json << 'EOF'
{
  "name": "vbos-civilization-2.0",
  "version": "0.1.0",
  "description": "Village-Based Operating System for Civilization 2.0 - Sustainable, regenerative technology infrastructure",
  "private": true,
  "workspaces": [
    "core/*",
    "services/*",
    "clients/*",
    "shared/*"
  ],
  "scripts": {
    "dev": "turbo run dev",
    "build": "turbo run build",
    "test": "turbo run test",
    "lint": "turbo run lint",
    "type-check": "turbo run type-check",
    "setup": "./scripts/setup/init.sh",
    "start:consensus": "cd core/consensus && npm run dev",
    "start:identity": "cd core/identity && npm run dev",
    "start:essie": "cd services/essie && npm run dev",
    "docker:up": "docker-compose -f docker-compose.dev.yml up -d",
    "docker:down": "docker-compose -f docker-compose.dev.yml down"
  },
  "devDependencies": {
    "turbo": "^1.10.0",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "eslint": "^8.0.0",
    "prettier": "^3.0.0",
    "typescript": "^5.0.0",
    "concurrently": "^8.0.0"
  },
  "keywords": [
    "sustainability",
    "blockchain",
    "decentralized-identity",
    "wellness",
    "regenerative",
    "village",
    "civilization"
  ],
  "author": "VBOS Community",
  "license": "MIT"
}
EOF

# Create .gitignore
cat > .gitignore << 'EOF'
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Production builds
dist/
build/
.next/
out/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Logs
logs/
*.log

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
.nyc_output/

# Database
*.db
*.sqlite

# Docker
.docker/

# Terraform
*.tfstate
*.tfstate.*
.terraform/

# Kubernetes secrets
secrets/
EOF

# Create turbo.json for monorepo management
cat > turbo.json << 'EOF'
{
  "$schema": "https://turbo.build/schema.json",
  "pipeline": {
    "build": {
      "dependsOn": ["^build"],
      "outputs": ["dist/**", ".next/**"]
    },
    "test": {
      "dependsOn": ["build"],
      "outputs": []
    },
    "lint": {
      "outputs": []
    },
    "dev": {
      "cache": false,
      "persistent": true
    },
    "type-check": {
      "dependsOn": ["^build"],
      "outputs": []
    }
  }
}
EOF

# Create TypeScript configuration
cat > tsconfig.json << 'EOF'
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["ES2020"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "commonjs",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "@vbos/consensus": ["./core/consensus/src"],
      "@vbos/identity": ["./core/identity/src"],
      "@vbos/essie": ["./services/essie/src"],
      "@vbos/shared": ["./shared/*"]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": [
    "node_modules",
    "dist",
    ".next"
  ]
}
EOF

# Create Docker Compose for development
cat > docker-compose.dev.yml << 'EOF'
version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: vbos-postgres
    environment:
      POSTGRES_DB: vbos_dev
      POSTGRES_USER: vbos
      POSTGRES_PASSWORD: dev_password_2024
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vbos"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: vbos-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  ipfs:
    image: ipfs/go-ipfs:latest
    container_name: vbos-ipfs
    ports:
      - "4001:4001"    # P2P
      - "5001:5001"    # API
      - "8080:8080"    # Gateway
    volumes:
      - ipfs_data:/data/ipfs
    environment:
      - IPFS_PROFILE=server

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: vbos-jaeger
    ports:
      - "16686:16686"  # UI
      - "14250:14250"  # gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  prometheus:
    image: prom/prometheus:latest
    container_name: vbos-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus

volumes:
  postgres_data:
  redis_data:
  ipfs_data:
  prometheus_data:

networks:
  default:
    name: vbos-network
EOF